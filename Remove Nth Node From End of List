# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
         slow=fast=head # NEED TWO POINTER
        
        for i in range(n):
            fast=fast.next # ITERATE THE FAST TILL THE N KI NEXT
        
        if fast is None: # IF THE LIST HAS ONE ELEMENT
            return head.next
    
        while fast.next: #TILL FAST IS NOT NONE
            
            fast=fast.next # IETRATE BOTH BY ONE STEP
            slow=slow.next
        
        slow.next=slow.next.next # AS YOU REACH TO THE NUMBER DO THIS
    
        return head    
